---
- name: Gather existing ZFS pools
  ansible.builtin.command: zpool list -H -o name
  register: existing_zpools
  changed_when: false

- name: Ensure ZFS pools exist when missing
  community.general.zpool:
    name: "{{ item.name }}"
    state: present
    vdevs: "{{ item.vdevs }}"
    pool_properties: "{{ item.pool_properties | default({}) }}"
    filesystem_properties: "{{ item.filesystem_properties | default({}) }}"
  loop: "{{ zfs_pools }}"
  when: item.name not in existing_zpools.stdout_lines
  loop_control:
    label: "{{ item.name }}"

- name: Ensure ZFS datasets exist
  community.general.zfs:
    name: "{{ item.key }}"
    state: present
    extra_zfs_properties: "{{ item.value.properties | default({}) }}"
  loop: "{{ zfs_datasets | dict2items }}"
  when: zfs_datasets is defined
  loop_control:
    label: "{{ item.key }}"

- name: Inspect ZFS pools
  ansible.builtin.command: zpool status
  register: zpool_status
  changed_when: false

- name: Report ZFS pools
  ansible.builtin.debug:
    var: zpool_status.stdout_lines

- name: Ensure Proxmox storage directories exist
  ansible.builtin.file:
    path: "{{ item.value.path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"
  loop: "{{ proxmox_storage | dict2items }}"
  when:
    - proxmox_storage is defined
    - item.value.type == 'dir'
    - item.value.path is defined
  loop_control:
    label: "{{ item.value.path | default(item.value.id) }}"

- name: Register Proxmox dir storage entries
  ansible.builtin.command: >-
    pvesm add {{ item.value.type }} {{ item.value.id }} --path {{ item.value.path }} --content {{ item.value.content }}
  register: pvesm_add_result
  failed_when: >-
    pvesm_add_result.rc not in [0, 255] or (pvesm_add_result.rc == 255 and 'already defined' not in pvesm_add_result.stderr)
  changed_when: pvesm_add_result.rc == 0
  loop: "{{ proxmox_storage | dict2items }}"
  when:
    - proxmox_storage is defined
    - item.value.type == 'dir'
  loop_control:
    label: "{{ item.value.id }}"

- name: Register Proxmox zfspool storage entries
  ansible.builtin.command: >-
    pvesm add {{ item.value.type }} {{ item.value.id }} --pool {{ item.value.pool }} --content {{ item.value.content }}
  register: pvesm_add_zfs_result
  failed_when: >-
    pvesm_add_zfs_result.rc not in [0, 255] or (pvesm_add_zfs_result.rc == 255 and 'already defined' not in pvesm_add_zfs_result.stderr)
  changed_when: pvesm_add_zfs_result.rc == 0
  loop: "{{ proxmox_storage | dict2items }}"
  when:
    - proxmox_storage is defined
    - item.value.type == 'zfspool'
  loop_control:
    label: "{{ item.value.id }}"
